SECCION 07 REST SERVER

- En esta seccion se introduce a la instalacion de mongoDB y Robo 3T como herramienta IDE para mongoDB
  La idea es crear un servicio REST con mongoDB como soporte para datos.


- Los pasos a seguir son:

    > npm init          'Creara el package.json para que podamos hacer instalaciones etc.

    > npm install express --save    'Vamos a utilizar express

    * Crearemos un directorio denominado "server" donde creare un archivo llamado server.js (esto es por organizacion)

    * Navegamos buscando "npm express" y, en la pagina de npm referente a express copiamos y pegamos el codigo para utilizarlo:
    const express = require('express')
    const app = express()
    app.get('/', function (req, res) {
        res.send('Hello World')
    })
    app.listen(3000)

    * Para las peticiones POST y el tratamiento de datos enviados y serializados utilizaremos "Body-parser"

    > npm install body-parser --save    'Instala body-parser para la serializacion de datos enviados


- Mas adelante, se presenta la posibilidad de crear un archivo de configuracion para la aplicacion, por lo que se
    crea el archivo /server/config/config.js

- En GitHub creamos un repositorio "node-restserver"

    > git init
    > git status
    > git add .
    > git commit -m "Primer commit"
    > git status
    > git remote add origin https://github.com/enalda/node-restserver.git
    > git push -u origin master
    > git tag -a v1.0.0 -m "Primera version del proyecto"
    > git push --tags


- SUBIDA A HEROKU (desde la linea de comando)
-==========================

Desde el directorio de la aplicacion:

    Para crear un repositorio en heroku cuyo nombre sera aleatorio:
    > heroku create

    Si queremos darle un nombre especifico (hay que recordar que los nombres son unicos en heroku y compartidos por todos los usuarios...) 
    > heroku create -h nombreRepositorio

Notar que, en cualquier caso, ademas de crear el repositoro en Heroku tambien lo hara en Git, mostrando la URL a dicho repositorio.

    > git remote            'Mostrara tanto heroku como git

En el caso en que no nos hubieramos logado antes, hay que hacer primero:
    > heroku login


Ahora, para subir el codigo:
    > git push heroku master

    > heroku open       'abrira la aplicacion en el navegador

    De encontrarnos un error, hay que definir el "start" en el package.json de la siguiente forma:

    "scripts":{
        "start": "node server/server.js",
        "test": "...."
    }

    > git add . 
    > git commit -am "Npm start listo"    'Agrega y aÃ±ade mensaje al commit
    > git push heroku master
    > heroku open

        En el navegador pondremos al final de la URL un /usuario, pero lo interesante es ir a POSTMAN
        e intentar hacer las peticiones PUT, GET, etc.

